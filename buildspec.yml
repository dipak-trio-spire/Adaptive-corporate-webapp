version: 0.2

env:
  shell: bash

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo Installing source Python dependencies...
      - pip install -r requirements.txt
      # - echo Installing Chrome...
      # - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
      # - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | tee /etc/apt/sources.list.d/google.list
      # - apt-get -qq update
      # - apt-get -qq install -y google-chrome-stable
      # - google-chrome --version
      # https://github.com/aws/aws-codebuild-docker-images/blob/48b53e25cf36dcb1e0b124bc7bebfb342d161b91/ubuntu/standard/5.0/Dockerfile#L82
      # - CHROME_VERSION=`google-chrome --version | awk -F '[ .]' '{print $3"."$4"."$5}'`
      # - CHROME_DRIVER_VERSION=`wget -qO- chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION` || true
      # - |
      #   if [ $? -ne 8 ]; then
      #     CHROME_VERSION=`google-chrome --version | awk -F '[ .]' '{print $3-1}'`
      #     CHROME_DRIVER_VERSION=`wget -qO- chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION`
      #   fi
      # - wget -qO /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip
      # - unzip -q /tmp/chromedriver_linux64.zip -d /opt
      # - rm /tmp/chromedriver_linux64.zip
      # - mv /opt/chromedriver /opt/chromedriver-$CHROME_DRIVER_VERSION
      # - chmod 755 /opt/chromedriver-$CHROME_DRIVER_VERSION
      # - ln -s /opt/chromedriver-$CHROME_DRIVER_VERSION /usr/bin/chromedriver
      # - chmod +x /usr/bin/chromedriver
      # - chromedriver --version
  pre_build:
    commands:
      - echo test
      - jq --version
      - n 18
      - npm cache clean --force
      - npm view next version
      - ls
      - touch $CODEBUILD_BUILD_ID-audit-report.json
      - echo Installing source NPM dependencies...
      - rm -rf node_modules package-lock.json
      - rm -rf .next
      - npm install
      - npm install @react-pdf/renderer --legacy-peer-deps
      - node -e 'console.log(v8.getHeapStatistics().heap_size_limit/(1024*1024))'
      - sed -i 's/.env.dev/.env.$ENVIRONMENT/g' package.json
      - echo Start App
      - nohup npm run start:application &
  build:
    on-failure: CONTINUE
    commands:
      - echo Build started on `date`
      # - npm run build
      - echo running an audit of 3rd party dependencies
      - echo Running BDD tests...
      - behave -f json -o $CODEBUILD_BUILD_ID-test-report.json || TEST_REPORT_FAILED=true
  post_build:
    on-failure: CONTINUE
    commands:
      - |
        if [ "$TEST_REPORT_FAILED" = "true" ]; then
          aws s3 cp $CODEBUILD_BUILD_ID-test-report.json s3://$TEST_REPORT_BUCKET/$CODEBUILD_BUILD_ID-test-report.json
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Behave tests failed for corporate webapp"}' https://hooks.slack.com/services/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
        fi
      - echo $CODEBUILD_BUILD_SUCCEEDING
